 mbtgmbefehjxspsb 


/usr/local/bin/codesourcery-arm-2011.03.sh

http://www.nas-central.org/wiki/Setting_up_the_codesourcery_toolchain_for_X86_to_ARM9_cross_compiling


chistenje na build:

sudo make clean
sudo make distclean
sudo git clean -fdx



qemu-system-arm -M beaglexm

https://github.com/equinoxorg/eko_client/wiki/Creating-a-Redeployable-SD-Card-Image
https://wiki.linaro.org/Resources/HowTo/Qemu-beagleboard

demek:
http://balau82.wordpress.com/2010/04/12/booting-linux-with-u-boot-on-qemu-arm/
http://balau82.wordpress.com/2010/03/27/busybox-for-arm-on-qemu/



fallocate -l 1G sdcard.img (prazen sdcard image od 1 gb)
chmod +x sd-format
sudo ./sd-format sdcard.img
sudo kpartx -av sdcard.img
(vo cross compile)
vo u-boot:
make omap3_beagle_config
make -j2 (za build)
mount na boot
cp MLO /media/boot/
sync
cp u-boot.img /media/boot/
cp ../linux/arch/arm/boot/zImage /media/boot/
cp ~/Downloads/sdcardimage/uEnv.txt /media/boot/
umount /media/boot
sudo kpartx -d sdcard.img
qemu-system-arm -M beaglexm -drive if=sd,cache=writeback,file=./sdcard.img -clock unix -nographic

za dodatna particija: izvrshi ja skriptata i potoa izvrshi gi slednite komandi
fdisk sdcard.img
:n
:p
:3
:w
sudo kpartx -a sdcard.img
sudo mkfs.ext3 -L ime_na_particija /dev/mapper/loop0p3

mkimage -A arm -O linux -T script -C none -a 0 -e 0 -n "SD Boot" -d script.txt boot.scr



uart1 iir_reg (efr_reg) address: 0x4806A008 
uart1 ier_reg address: 0x4806A004

chitanje na vrednost od adresa na registar:
md 0x4806A008 10
dava vrednost: 00000001 00000000 00000008 00000060
najverojatno 00000001 e potrebnata 32-bitna adresa... i bi trebalo da se smeni vo 000000c1
a toa se pravi so:
mm 0x4806A008 i vnesuvame 000000c1


za vim:
dd if=/dev/zero of=binaren.bin bs=1 count=4
xxd -g 1 binaren.bin > binaren.hex
vi binaren.hex
:%!xxd
editiranje
:%!xxd -r
:wq
xxd -r binaren.hex > binaren.bin
dd if=binaren.bin bs=1  >> uImage

LINARO:
sudo apt-add-repository ppa:linaro-maintainers/toolchain
sudo apt-get install gcc-arm-linux-gnueabi


arm-linux-gnueabi-gcc -static -o init main.c
sudo kpartx -av .img
sudo mkdir /media/rootfs/sbin
sudo cp -a init/init /media/rootfs/sbin/
umount ...
sudo kpartx -d ...
qemu ....



BUSYBOX:
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- defconfig (vo busybox)
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- menuconfig -> build busybox as a static binary (build options) -> networking utulities (iskluchi gi ip, ifupdown i inetd)
make -j4 ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-
kpartx -av .img
sudo rm /media/rootfs/sbin/init
sudo mkdir /media/rootfs/bin
sudo cp -a busybox /media/rootfs/bin/ (vo busybox sme)
cd /media/rootfs/bin/
sudo ln -s busybox sh
sudo ln -s busybox ls
sudo ln -s busybox ln
umount i kpartx -d
qemu
primer za dodavanje komanda (primer za mount): ln -s busybox mount
primeri:
# mkdir proc
/ # mkdir sys
bin # ln -s busybox mount
/bin # 
/bin # mount -t proc none /proc
/bin # mount -t sysfs none /sys
/bin # cd /sys/
/sys # cd block/
...
busybox sync

TETEEEEE

===Linaro Tools Cross Compiler===
sudo add-apt-repository ppa:linaro-maintainers/toolchain
sudo apt-get update
sudo apt-get install gcc-arm-linux-gnueabi

во ~/.bashrc
export ARCH=arm
export CROSS_COMPILE=arm-linux-gnueabi-
Сега се вклучено во и само со make се прави make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-

===vezba_2===
1. a) uniq -dc filename
   b) sort -u filename
   c) grep ^a.*ka$ filename
2. find . -name "*.[ch]" -exec grep -l "\bprintf" '{}' \;
3. find . -name "*.txt" -exec sed -i 's/note/NOTE/' '{}' \;
4. man 2 open (За да се најде некој шаблон се пишува  знакот '/' и после него текст на пр '/O_DIRECT' и после со n се оди на следно (next), а со Shift+n на претходно совпаѓање)
5. Скрипта во sbin (Во bin мора да се busybox sh mount...) (треба да нема друг init)
	#!/bin/sh

	if [ -d "/proc" -a -d "/sys" -a -d "/tmp" ]
	then
		echo Root file-system already initialized.
	else
		mkdir /proc
		mkdir /sys
		mkdir /tmp	
	fi

	mount -t proc none /proc
	mount -t sysfs none /sys
	mount -t tmpfs none /tmp
	#mount -t devtmpfs none /dev
	/bin/sh

===Вграден ramrfs===
Се прави нова папка и во неа се прават сите потребни папки (proc, sys... и init)
Во source-от на Линуксот преку menuconfig се додава патеката на оваа папка (пр. target-rootfs/) во 

General Setup->Initial RAM filesystem and RAM disk (initramfs/initrd) support

После се гради нова слика во којашто има вграден rootfs
 
===Hello World Module===
{Out of tree e koga se gradi vo drug folder i posle samo .ko se instalira; 
mkdir hello-module
cd hello-module/
gedit hello.c &
	#include <linux/init.h>
	#include <linux/module.h>
	#include <linux/kernel.h>

	static int __init hello_init(void)
	{
		printk(KERN_INFO "Hello from Linux Kernel\n");
		return 0;
	}

	static void __exit hello_exit(void)
	{
		printk(KERN_INFO "Bye from Linux Kernel\n");
	}

	module_init(hello_init);
	module_exit(hello_exit);

gedit Makefile &
	ifneq ($(KERNELRELEASE),)
	obj-m := hello.o			//ova ke se izvrshi na povik na make modules
	else
	KDIR ?= /usr/src/linux-headers-`uname -r`
	all:
		$(MAKE) -C $(KDIR) M=`pwd` modules
	clean: 
		$(MAKE) -C $(KDIR) M=`pwd` clean
	endif
uname -r (ja dava verzijata na tekovniot linux kernel na kompjuterot)
ls -l /usr/src/linux-headers-3.2.0-30-generic-pae/ (source-ot se naogja na ovaa pateka, ova treba da e vo KDIR ili podobro e so `uname -r` dinamichki da se vnesuva patekata, da ne e hardkodirano)
}

{Gradenje na modul (out of tree) za x86 i testiranje na lokalnata mashina;
unset ARCH
unset CROSS_COMPILE
make (ovoj make e za x86, ne za arm)
ls -l (ima hello.o, hello.ko itn.)
file hello.ko (pokazuva deka e ELF...)
readelf -e hello.ko (se chita ELF file-ot kajshto mozhe da se vidat site sektori)
sudo insmod hello.ko 
lsmod
lsmod | grep hello
dmesg 
sudo rmmod -f hello
dmesg (tuka se ispishuva od printk + se kazhuva deka e tainted, zashto nemame vneseno licenca)
cat /proc/sys/kernel/tainted (ovde se chuva nekoja shifra shto kazhuva dali e tainted kernelot i sl)
}

{Gradenje na modul (out of tree) za arm. KDIR mozhe da prima vrednost i od komandna linija ( zatoa e ?= ) ;
export ARCH=arm
export CROSS_COMPILE=arm-linux-gnueabi-
cd Documents/Damjan/hello-module/
make KDIR=/home/user/Documents/Damjan/linux-raw 
file hello.ko
make KDIR=/home/user/Documents/Damjan/linux-raw clean (clean e target, sega mozhe i da se pravi clean od komandna linija)
make KDIR=/home/user/Documents/Damjan/linux-raw (ako nema target od komandna linija se izvrshuva prviot target - all: )
qemu-system-arm -M beaglexm -drive if=sd,cache=writeback,file=./sd-hm-out-of-tree.img -clock unix -nographic
}

{Ova e out of tree zashto e izgradeno nadvor vo hello-module/ Za da se instalira na plochka treba da go ima hello.ko vo /lib/modules/verzijata na os (se gleda so: uname -r);
cd /media/rootfs/
sudo mkdir lib
cd lib/
sudo mkdir modules
cd modules/
sudo mkdir 3.5.3+	(3.5.3+ e dobieno so: uname -r)
cd 3.5.3+/
sudo cp ~/Documents/Damjan/hello-module/hello.ko ./ 
(sega vo sh vo qemu so insmod moze da go instalirame)
 / # busybox insmod lib/modules/3.5.3\+/hello.ko 
	[  610.979187] hello: module license 'unspecified' taints kernel.
	[  610.	980255] Disabling lock debugging due to kernel taint
	[  610.989044] Hello from Linux Kernel
 / # busybox lsmod
	hello 746 0 - Live 0xbf000000 (PO)
 / # busybox rmmod hello
	[  627.077362] Bye from Linux Kernel
 / # busybox lsmod
}

{Vnatre vo kernelot e <<in tree>> i mozhe da go vkluchuvame statichki, za toa treba da go iskopirame hello.c vo drivers/misc i da gi smenime Kconfig i Makefile, posle mozhe da go vkluchime vo menuconfig;
cp Documents/Damjan/hello-module/hello.c Documents/Damjan/linux-raw/drivers/misc/
cd Documents/Damjan/drivers/
cd Documents/Damjan/linux-raw/drivers/
gedit Kconfig &
(copy na posledniot zapis i izmena za HELLO)
	config HELLO
		tristate "hello"
		help
		  Seavus Training
gedit Makefile &
(copy na posledniot zapis i izmena za hello)
	obj-$(CONFIG_HELLO)		+= hello.o   
(bez / na kraj. Imeto e vazno: toa CONFIG_HELLO - HELLO e imeto definiano vo Kconfig)
 make menuconfig (Device drivers->Misc drivers-> se pojavuva hello, mozhe da se selektira, sega e vkluchen statichki)
 make -j4

 cd linux-hello-module/
 cd arch/arm/boot/
 strings Image | grep Hello
(tuka se chuvaat stringovite shto se pishuvaat na ekran)
qemu-system-arm -M beaglexm -drive if=sd,cache=writeback,file=./sd-hm-in-tree.img -clock unix -nographic
(sega vo logot za gradenjeto na kernelot mozhe da se prochita porakata printk od modulot)
}
